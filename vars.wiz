
var oram @ 0x00 : [u8; 0x7f];
let ROMADDR = 0xF000;

/*;============================================================================
//; Z P - V A R I A B L E S
//;============================================================================
*/
var verPosP1 @ 0x80: u8; //
var verPosP1A  @ 0x80 : [u8; 5]; //           = $80    ; $80 - $83
var verPosP1p1  @ 0x81 : [u8; 5]; //           = $80    ; $80 - $83
var VAR84 @ 0x84 : u8; //
var jumpHangTime @ 0x85 : u8; //        = $85
var hammerTime  @ 0x86 : u8; //         = $86
var playerScorem1 @ 0x86 : u8; //         = $87    ; $87-$88
var playerScoreA @ 0x87 : [u8;5]; //         = $87    ; $87-$88
var playerScore @ 0x87 : u8; //         = $87    ; $87-$88
var playerScorep1 @ 0x88 : u8; // playerScore+1
var marioFrameDelay @ 0x89 : u8; //     = $89

var attractModeTimer @ 0x8A : u8 ;//    ; incremented every other frame when it reaches
                                  //    ; 0 then attract mode (color cycling) begins
var soundIndex       @ 0x8B : u8 ;//
var gameState        @ 0x8C : u8 ;//    ; 10000000 = game in progress
                                  //    ; 00000010 = level complete (play music)
                                  //    ; 00000001 = start of new level
                                  //    ; 00000000 = game over
var losingLifeFlag   @ 0x8D : u8 ;//    ; set to #$FF when Mario loses a life                              
var attractMode      @ 0x8E : u8 ;//    ; when D7 = 1 then the game is in attract mode
var soundDuration    @ 0x8F : u8 ;//
                              
var gameScreen         @ 0x90 : u8 ;//    ; $00 = barrels $01 = firefox
var consoleDebounce    @ 0x91 : u8 ;//    ; timer to check the console switches
var backgroundColor    @ 0x92 : u8 ;//
var backgroundColorA   @ 0x92 : [u8;10]; //
var horPosMario        @ 0x93 : u8 ;//
var marioDirection     @ 0x94 : u8 ;//    ;  Mario or Donkey Kong
var missilePointer     @ 0x95 : u8 ;//    ; $95 - $96
var ballPointer        @ 0x97 : u8 ;//    ; $97 - $98
var holdObstacleNumber @ 0x99 : u8 ;//    ; used in overscan to loop through obstacles
var playfieldColor     @ 0x9A : u8 ;//
var playfieldColorA     @ 0x9A : [u8;10];//

var verPosMario        @ 0x9B : u8 ;//
var horPosHammer       @ 0x9C : u8 ;//

var zpZero             @ 0x9D : u8 ;//    ; always 0 -- seems not to be used
var zpZeroOrOne        @ 0x9E : u8 ;//    ; 0 for barrels 1 for firefox -- seems not to be used
var rivets             @ 0x9F : u8 ;//    ; $9F-$A2
var rivetsA             @ 0x9F : [u8;4] ;//    ; $9F-$A2
var rivetsm2           @ 0x9D : [u8;10] ; // rivits - 2
var numberOfLives      @ 0xA3 : u8 ;//
var bonusTimer         @ 0xA4 : u8 ;//
var zpMarioGraphics    @ 0xA5 : [u8;10] ;//    ; $A5 - $C0

var horPosP1           @ 0xC1 : u8 ;//    ; $C1 - $C4
var horPosP1A           @ 0xC1 : [u8;4] ;//    ; $C1 - $C4

var directionP1        @ 0xC5 : u8 ;//    ; $C5 - $C8
var directionP1A        @ 0xC5 : [u8;4] ;//    ; $C5 - $C8
			    //    ; %xxxx0001 = moving right
                            //    ; %xxxx0000 = moving left
                            //    ; %1111xxxx = moving down (ladder or off edge)
var barrelLadderNumber   @ 0xC9 : u8 ;//    ; $C9 - $CC
var barrelLadderNumberA   @ 0xC9 : [u8;10] ;//    ; $C9 - $CC
var barrelLadderNumberAP3   @ 0xCC : [u8;10] ;//    ; $C9 - $CC
                              
var coarseHorPosP1       @ 0xCD : u8 ;//    ; $CD - $D2
var coarseHorPosP1A       @ 0xCD : [u8;10] ;//    ; $CD - $D2
                              
var fineHorPosP1         @ 0xD3 : u8 ;//    ; $D3 - $D8
var fineHorPosP1A         @ 0xD3 : [u8;10] ;//    ; $D3 - $D8

var rightPF1Pointer      @ 0xD9 : u8 ;//    ; $D9 - $DA
var pf0Pointer           @ 0xDB : u8 ;//    ; $DB - $DC
var digitPointerm4       @ 0xD9 : [u8;4] ;//    ; $DD - $E5
var digitPointerm3       @ 0xDA : [u8;4] ;//    ; $DD - $E5
var digitPointer         @ 0xDD : u8 ;//    ; $DD - $E5
var digitPointerp4         @ 0xDD + 0x04: u8 ;//    ; $DD - $E5
var digitPointerp6         @ 0xDD + 0x06: u8 ;//    ; $DD - $E5

//;-------------------------------------------
var pf2Pointer           @ 0xDD : u8;
var leftPF1Pointer       @ 0xDD+2 : u8;
var obstaclePointer      @ 0xDD+4   : u8; //$E1 - $E2
var marioGraphicPointer  @ 0xDD+6   : u8; //$E3 - $E4
var marioGraphicPointerA  @ 0xDD+6   : [u8;4]; //$E3 - $E4
var marioGraphicPointerB  @ 0xDD+6   : u16; //$E3 - $E4

//;-------------------------------------------
var marioColorPointer    @ 0xDD+6 : u16 ; // marioGraphicPointer
var audioFrequencyPointer16 @ 0xDD+6 : u16 ; // marioGraphicPointer
var audioFrequencyPointer @ 0xDD+6 : u8 ; // marioGraphicPointer
var audioFrequencyPointerp1 @ 0xDD+7 : u8 ; // marioGraphicPointer

var marioOffset          @ 0xDD+6+2 : u8; // marioGraphicPointer + 2 [$E5]
//;-------------------------------------------
var joystickValue       @ 0xDD+6+2 : u8 ; // marioOffset     ; //$E5
var groupCount          @ 0xDD+6+2 : u8 ; // joystickValue   ; //$E5
//;-------------------------------------------
var obstacleOffset       @ 0xDD+6+2 : u8 ; // groupCount      ; //$E5
//;-------------------------------------------
var loopCount            @ 0xE6 : u8 ;//
var randomSeed           @ 0xE7 : u8 ;//
var frameCount           @ 0xE8 : u8 ;//
var fireButtonDebounce   @ 0xE9 : u8 ;//

var ladderNumber         @ 0xEA : u8 ;//    ; holds the ladder number Mario is on
                            //    ; from top down
                            //    ; ($00 - $08) for barrels
                            //    ; ($12 - $21) for firefox
var jumpingDirection     @ 0xEB : u8 ;//    ; hold whether the player was pushing right or
                            //    ; left on the joystick while jumping
var jumpingObstacle      @ 0xEC : u8 ;//    ; when 0 -- Mario is jumping obstacle (add points)                              
var walkwayNumber        @ 0xED : u8 ;//    ; holds the walkway section Mario is in (0 - 5)
//;-------------------------------------------
var obstacleNumber       @ 0xED : u8 ; // walkwayNumber;
//;-------------------------------------------
var missile1Size         @ 0xED : u8 ; // obstacleNumber;
//;-------------------------------------------
var temp                 @ 0xED : u8 ; // missile1Size;

var hammerKernelVector   @ 0xEE : [u8;4] ;//    ; pointer to hammer kernel ($EE - $EF)
var kernelVector         @ 0xF0 : u8 ;//    ; pointer to no ladder kerenel ($F0 - $F1)
var obstaclePointerLSB   @ 0xF2 : [u8;6] ;//    ; $F2 - $F7
var marioColorPointerLSBM1 @ 0xF7 : [u8;6]; //
var marioColorPointerLSB @ 0xF8 : [u8;6] ;//    ; $F8 - $FD
